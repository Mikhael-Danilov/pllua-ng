--
\set VERBOSITY terse
--
do language pllua $$

  a = { json_test = "This is only a test.",
        foo = "If this were real data, it would make more sense.",
	piem = [[
Now I, even I, would celebrate
In rhymes unapt the great
Immortal Syracusan rivaled nevermore,
Who in his wondrous lore,
Passed on before,
Left men his guidance
How to circles mensurate.
]],
        names = { "Dougal", "Florence", "Ermintrude", "Zebedee",
	          "Brian", "Dylan" },
	mixed = { nil, nil, 123, "foo", nil, true, false, [23] = "fred" },
	empty = {},
	empty2 = {{},{}},
	nested = { "arrayelem", { ["object key"] = "object val",
	                          subobject = { subarray = { { { 123 } } } } } }
      }
  b = pgtype.jsonb(a)
  print(b)
  c = pgtype.jsonb(a, { null = false })
  print(c)
  d = pgtype.jsonb(a, { map = function(v) if type(v) == "boolean" then v = tostring(v) end return v end })
  print(d)
  e = pgtype.jsonb(a, { array_thresh = 1 })
  print(e)
  f = pgtype.jsonb(a, { empty_object = true })
  print(f)

  spi.execute([[ create temp table jt1 as select $1 as a ]], b)

$$;
INFO:  {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": [], "mixed": [null, null, 123, "foo", null, true, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "fred"], "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [[], []], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."}
INFO:  {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": [], "mixed": [null, null, 123, "foo", null, true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "fred"], "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [[], []], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."}
INFO:  {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": [], "mixed": [null, null, 123, "foo", null, "true", "false", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "fred"], "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [[], []], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."}
INFO:  {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": [], "mixed": {"3": null, "4": null, "6": null, "7": null, "23": null}, "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [[], []], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."}
INFO:  {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": {}, "mixed": [null, null, 123, "foo", null, true, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "fred"], "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [{}, {}], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."}
select a, pg_typeof(a) from jt1;
                                                                                                                                                                                                                                                                                                                                         a                                                                                                                                                                                                                                                                                                                                         | pg_typeof 

 {"foo": "If this were real data, it would make more sense.", "piem": "Now I, even I, would celebrate\nIn rhymes unapt the great\nImmortal Syracusan rivaled nevermore,\nWho in his wondrous lore,\nPassed on before,\nLeft men his guidance\nHow to circles mensurate.\n", "empty": [], "mixed": [null, null, 123, "foo", null, true, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "fred"], "names": ["Dougal", "Florence", "Ermintrude", "Zebedee", "Brian", "Dylan"], "empty2": [[], []], "nested": ["arrayelem", {"subobject": {"subarray": [[[123]]]}, "object key": "object val"}], "json_test": "This is only a test."} | jsonb
(1 row)

create temp table jt2(id serial, a jsonb);
insert into jt2(a) values ('1');
insert into jt2(a) values ('"foo"');
insert into jt2(a) values ('true');
insert into jt2(a) values ('null');
insert into jt2(a) values ('{"foo":123}');
insert into jt2(a) values ('{"foo":null}');
insert into jt2(a) values ('[10,20,30]');
insert into jt2(a) values ('{"foo":[2,4,6]}');
insert into jt2(a) values ('[{"foo":"bar"},{"baz":"foo"},123,null]');
-- check objects with keys that look like numbers
insert into jt2(a) values ('{"1":"foo", "2":[false,true], "foo":{}}');
insert into jt2(a) values ('{"1":"foo", "2":[false,true]}');
do language pllua $$
  s = spi.prepare([[ select a from jt2 order by id ]])
  for r in s:rows() do
    print(r.a)
    b = r.a(function(k,v,...)
              if type(v)~="table" then
	        print("mapfunc",type(k),k,v,...)
	      else
	        print("mapfunc",type(k),k,type(v),...)
	      end
	      return k,v
	    end)
    print(type(b))
  end
$$;
INFO:  1
INFO:  mapfunc	nil	nil	1
INFO:  number
INFO:  "foo"
INFO:  mapfunc	nil	nil	foo
INFO:  string
INFO:  true
INFO:  mapfunc	nil	nil	true
INFO:  boolean
INFO:  null
INFO:  mapfunc	nil	nil	nil
INFO:  nil
INFO:  {"foo": 123}
INFO:  mapfunc	string	foo	123
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  {"foo": null}
INFO:  mapfunc	string	foo	nil
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  [10, 20, 30]
INFO:  mapfunc	number	0	10
INFO:  mapfunc	number	1	20
INFO:  mapfunc	number	2	30
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  {"foo": [2, 4, 6]}
INFO:  mapfunc	number	0	2	foo
INFO:  mapfunc	number	1	4	foo
INFO:  mapfunc	number	2	6	foo
INFO:  mapfunc	string	foo	table
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  [{"foo": "bar"}, {"baz": "foo"}, 123, null]
INFO:  mapfunc	string	foo	bar	0
INFO:  mapfunc	number	0	table
INFO:  mapfunc	string	baz	foo	1
INFO:  mapfunc	number	1	table
INFO:  mapfunc	number	2	123
INFO:  mapfunc	number	3	nil
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  {"1": "foo", "2": [false, true], "foo": {}}
INFO:  mapfunc	string	1	foo
INFO:  mapfunc	number	0	false	2
INFO:  mapfunc	number	1	true	2
INFO:  mapfunc	string	2	table
INFO:  mapfunc	string	foo	table
INFO:  mapfunc	nil	nil	table
INFO:  table
INFO:  {"1": "foo", "2": [false, true]}
INFO:  mapfunc	string	1	foo
INFO:  mapfunc	number	0	false	2
INFO:  mapfunc	number	1	true	2
INFO:  mapfunc	string	2	table
INFO:  mapfunc	nil	nil	table
INFO:  table
create temp table jt3(id integer, a jsonb);
-- first row should be plain, then a couple with compressed values,
-- then a couple with external toast
insert into jt3 select i, ('[' || repeat('"foo",',10*(10^i)::integer) || i || ']')::jsonb from generate_series(1,5) i;
do language pllua $$
  s = spi.prepare([[ select a from jt3 where id = $1 ]])
  for i = 1,5 do
    local r = (s:execute(i))[1]
    local a = r.a()
    print(#a,a[#a])
  end
$$;
INFO:  101	1
INFO:  1001	2
INFO:  10001	3
INFO:  100001	4
INFO:  1000001	5
--end
