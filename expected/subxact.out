--
\set VERBOSITY terse
--
create table xatst (a integer);
do language pllua_ng $$
  local stmt = spi.prepare([[ insert into xatst values ($1) ]]);
  stmt:execute(1);
  pcall(function() stmt:execute(2) end)
  stmt:execute(3);
$$;
-- should now be two different xids in xatst, and 3 rows
select count(*), count(distinct age(xmin)) from xatst;
 count | count 
-------+-------
     3 |     2
(1 row)

truncate table xatst;
do language pllua_ng $$
  local stmt = spi.prepare([[ insert into xatst values ($1) ]]);
  stmt:execute(1);
  print(pcall(function() stmt:execute(2) error("foo") end))
  stmt:execute(3);
$$;
INFO:  false	[string "DO-block"]:4: foo
-- should now be one xid in xatst, and 2 rows
select count(*), count(distinct age(xmin)) from xatst;
 count | count 
-------+-------
     2 |     1
(1 row)

truncate table xatst;
do language pllua_ng $$
  local stmt = spi.prepare([[ insert into xatst values ($1) ]]);
  stmt:execute(1);
  print(pcall(function() stmt:execute(2) server.error("foo") end))
  stmt:execute(3);
$$;
INFO:  false	ERROR: XX000 foo
-- should now be one xid in xatst, and 2 rows
select count(*), count(distinct age(xmin)) from xatst;
 count | count 
-------+-------
     2 |     1
(1 row)

do language pllua_ng $$
  local function f() for r in spi.rows([[ select * from xatst order by a ]]) do print(r) end end
  print(pcall(f))
$$;
INFO:  (1)
INFO:  (3)
INFO:  true
do language pllua_ng $$
  local function f() for r in spi.rows([[ select * from xatst order by a ]]) do print(r) end end
  local function f2() error("foo") end
  print(pcall(f2))
  f()
$$;
INFO:  false	[string "DO-block"]:3: foo
INFO:  (1)
INFO:  (3)
do language pllua_ng $$
  local function f(e) print("error",e) for r in spi.rows([[ select * from xatst order by a ]]) do print(r) end end
  local function f2() error("foo") end
  print(xpcall(f2,f))
$$;
INFO:  error	[string "DO-block"]:3: foo
INFO:  (1)
INFO:  (3)
INFO:  false	nil
truncate table xatst;
do language pllua_ng $$
  local stmt = spi.prepare([[ insert into xatst values ($1) ]]);
  local function f(e) print("error",e) stmt:execute(3) end
  local function f2() stmt:execute(2) error("foo") end
  stmt:execute(1)
  print(xpcall(f2,f))
$$;
INFO:  error	[string "DO-block"]:4: foo
INFO:  false	nil
-- should now be one xid in xatst, and 2 rows
select count(*), count(distinct age(xmin)) from xatst;
 count | count 
-------+-------
     2 |     1
(1 row)

do language pllua_ng $$
  local function f(e) error("bar") end
  local function f2() error("foo") end
  print(xpcall(f2,f))
$$;
INFO:  false	error in error handling
do language pllua_ng $$
  print(lpcall(function() error("caught") end))
$$;
INFO:  false	[string "DO-block"]:2: caught
do language pllua_ng $$
  print(lpcall(function() server.error("not caught") end))
$$;
ERROR:  not caught
--end
