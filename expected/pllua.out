--
CREATE EXTENSION pllua_ng;
\set VERBOSITY terse
--
-- new stuff
--
create type ctype3 as (fred integer, jim numeric);
do $$
  begin
    if current_setting('server_version_num')::integer >= 110000 then
      execute 'create domain dtype as ctype3 check((VALUE).jim is not null)';
    else
      execute 'create type dtype as (fred integer, jim numeric)';
    end if;
  end;
$$;
create type ctype2 as (thingy text, wotsit integer);
create type ctype as (foo text, bar ctype2, baz dtype);
create table tdata (
    intcol integer,
    textcol text,
    charcol char(32),
    varcharcol varchar(32),
    compcol ctype,
    dcompcol dtype
);
insert into tdata
values (1, 'row 1', 'padded with blanks', 'not padded', ('x',('y',1111),(111,11.1)), (11,1.1)),
       (2, 'row 2', 'padded with blanks', 'not padded', ('x',('y',2222),(222,22.2)), (22,2.2)),
       (3, 'row 3', 'padded with blanks', 'not padded', ('x',('y',3333),(333,33.3)), (33,3.3));
create function tf1() returns setof tdata language pllua_ng as $f$
  for i = 1,4 do
    coroutine.yield({ intcol = i,
                      textcol = "row "..i,
		      charcol = "padded with blanks",
		      varcharcol = "not padded",
		      compcol = { foo = "x",
		      	      	  bar = { thingy = "y", wotsit = i*1111 },
				  baz = { fred = i*111, jim = i*11.1 }
				},
		      dcompcol = { fred = i*11, jim = i*1.1 }
		    });
  end
$f$;
select * from tf1();
 intcol | textcol |             charcol              | varcharcol |           compcol           | dcompcol 
--------+---------+----------------------------------+------------+-----------------------------+----------
      1 | row 1   | padded with blanks               | not padded | (x,"(y,1111)","(111,11.1)") | (11,1.1)
      2 | row 2   | padded with blanks               | not padded | (x,"(y,2222)","(222,22.2)") | (22,2.2)
      3 | row 3   | padded with blanks               | not padded | (x,"(y,3333)","(333,33.3)") | (33,3.3)
      4 | row 4   | padded with blanks               | not padded | (x,"(y,4444)","(444,44.4)") | (44,4.4)
(4 rows)

--
-- various checks of type handling
--
do language pllua_ng $$ print(pgtype(nil,'ctype3')(1,2)) $$;
INFO:  (1,2)
do language pllua_ng $$ print(pgtype(nil,'ctype3')({1,2})) $$;
INFO:  (,)
do language pllua_ng $$ print(pgtype(nil,'ctype3')(true,true)) $$;
ERROR:  pllua: incompatible value type
do language pllua_ng $$ print(pgtype(nil,'ctype3')("1","2")) $$;
INFO:  (1,2)
do language pllua_ng $$ print(pgtype(nil,'ctype3')("fred","jim")) $$;
ERROR:  invalid input syntax for integer: "fred"
do language pllua_ng $$ print(pgtype(nil,'ctype3')({fred=1,jim=2})) $$;
INFO:  (1,2)
do language pllua_ng $$ print(pgtype(nil,'ctype3')({fred=1,jim={}})) $$;
ERROR:  pllua: incompatible value type
do language pllua_ng $$ print(pgtype(nil,'ctype3')({fred=1,jim=nil})) $$;
INFO:  (1,)
--do language pllua_ng $$ print(pgtype(nil,'dtype')({fred=1,jim=nil})) $$;
create function tf2() returns setof tdata language pllua_ng as $f$
  local t = spi.execute("select * from tdata")
  for i,v in ipairs(t) do coroutine.yield(v) end
$f$;
select * from tf2();
 intcol | textcol |             charcol              | varcharcol |           compcol           | dcompcol 
--------+---------+----------------------------------+------------+-----------------------------+----------
      1 | row 1   | padded with blanks               | not padded | (x,"(y,1111)","(111,11.1)") | (11,1.1)
      2 | row 2   | padded with blanks               | not padded | (x,"(y,2222)","(222,22.2)") | (22,2.2)
      3 | row 3   | padded with blanks               | not padded | (x,"(y,3333)","(333,33.3)") | (33,3.3)
(3 rows)

do language pllua_ng $$ a = pgtype.array.integer({{{1,2}},{{3,4}},{{5,6}}},3,1,2) print(a) $$;
INFO:  {{{1,2}},{{3,4}},{{5,6}}}
do language pllua_ng $$ print(#a,#(a[1]),#(a[1][1])) $$;
INFO:  3	1	2
do language pllua_ng $$ print(a[3][1][2],a[1][1][1]) $$;
INFO:  6	1
do language pllua_ng $$ print(pgtype.int4range(123,456)) $$;
INFO:  [123,456)
do language pllua_ng $$ print(pgtype.int4range()) $$;
INFO:  empty
do language pllua_ng $$ print(pgtype.int4range(123,456,'(]')) $$;
INFO:  [124,457)
do language pllua_ng $$ print(pgtype.int4range(nil,456,'(]')) $$;
INFO:  (,457)
do language pllua_ng $$ print(pgtype.int4range(nil,nil)) $$;
INFO:  (,)
do language pllua_ng $$ print(pgtype.int4range(123,nil)) $$;
INFO:  [123,)
-- test numerics
create function lua_numexec(code text, n1 numeric, n2 numeric)
  returns text
  language pllua_ng
  as $$
    local f,e = load("return function(n1,n2) return "..code.." end")
    assert(f,e)
    f = f()
    assert(f)
    return tostring(f(n1,n2))
$$;
create function pg_numexec(code text, n1 numeric, n2 numeric)
  returns text
  language plpgsql
  as $$
    declare
      r text;
    begin
      execute format('select (%s)::text',
      	      	     regexp_replace(regexp_replace(code, '\mnum\.', '', 'g'),
		                    '\mn([0-9])', '$\1', 'g'))
	 into r using n1,n2;
      return r;
    end;
$$;
do language pllua_ng $$ num = require "pllua.numeric" $$;
with
  t as (select code,
               lua_numexec(code, 5439.123456, -1.9) as lua,
               pg_numexec(code, 5439.123456, -1.9) as pg
          from unnest(array[
		$$ n1 + n2 $$,		$$ n1 - n2 $$,
		$$ n1 * n2 $$,		$$ n1 / n2 $$,
		$$ n1 % n2 $$,		$$ n1 ^ n2 $$,
		$$ (-n1) + n2 $$,	$$ (-n1) - n2 $$,
		$$ (-n1) * n2 $$,	$$ (-n1) / n2 $$,
		$$ (-n1) % n2 $$,	$$ (-n1) ^ 3 $$,
		$$ (-n1) + (-n2) $$,	$$ (-n1) - (-n2) $$,
		$$ (-n1) * (-n2) $$,    $$ (-n1) / (-n2) $$,
		$$ (-n1) % (-n2) $$,	$$ (-n1) ^ (-3) $$,
		$$ (n1) > (n2) $$,	$$ (n1) < (n2) $$,
		$$ (n1) >= (n2) $$,	$$ (n1) <= (n2) $$,
		$$ (n1) > (n2*10000) $$,
		$$ (n1) < (n2*10000) $$,
		$$ (n1) >= (n2 * -10000) $$,
		$$ (n1) <= (n2 * -10000) $$,
		$$ num.round(n1) $$,    $$ num.round(n2) $$,
		$$ num.round(n1,4) $$,	$$ num.round(n1,-1) $$,
		$$ num.trunc(n1) $$,	$$ num.trunc(n2) $$,
		$$ num.trunc(n1,4) $$,	$$ num.trunc(n1,-1) $$,
		$$ num.floor(n1) $$,	$$ num.floor(n2) $$,
		$$ num.ceil(n1) $$,	$$ num.ceil(n2) $$,
		$$ num.abs(n1) $$,	$$ num.abs(n2) $$,
		$$ num.sign(n1) $$,	$$ num.sign(n2) $$,
		$$ num.sqrt(n1) $$,
		$$ num.exp(12.3) $$,
		$$ num.exp(n2) $$
  ]) as u(code))
select (lua = pg) as ok, * from t;
 ok |          code           |              lua               |               pg               
----+-------------------------+--------------------------------+--------------------------------
 t  |  n1 + n2                | 5437.223456                    | 5437.223456
 t  |  n1 - n2                | 5441.023456                    | 5441.023456
 t  |  n1 * n2                | -10334.3345664                 | -10334.3345664
 t  |  n1 / n2                | -2862.6965557894736842         | -2862.6965557894736842
 t  |  n1 % n2                | 1.323456                       | 1.323456
 t  |  n1 ^ n2                | 0.00000007989048519637487      | 0.00000007989048519637487
 t  |  (-n1) + n2             | -5441.023456                   | -5441.023456
 t  |  (-n1) - n2             | -5437.223456                   | -5437.223456
 t  |  (-n1) * n2             | 10334.3345664                  | 10334.3345664
 t  |  (-n1) / n2             | 2862.6965557894736842          | 2862.6965557894736842
 t  |  (-n1) % n2             | -1.323456                      | -1.323456
 t  |  (-n1) ^ 3              | -160911376260.9068713240072028 | -160911376260.9068713240072028
 t  |  (-n1) + (-n2)          | -5437.223456                   | -5437.223456
 t  |  (-n1) - (-n2)          | -5441.023456                   | -5441.023456
 t  |  (-n1) * (-n2)          | -10334.3345664                 | -10334.3345664
 t  |  (-n1) / (-n2)          | -2862.6965557894736842         | -2862.6965557894736842
 t  |  (-n1) % (-n2)          | -1.323456                      | -1.323456
 t  |  (-n1) ^ (-3)           | -0.0000000000062146            | -0.0000000000062146
 t  |  (n1) > (n2)            | true                           | true
 t  |  (n1) < (n2)            | false                          | false
 t  |  (n1) >= (n2)           | true                           | true
 t  |  (n1) <= (n2)           | false                          | false
 t  |  (n1) > (n2*10000)      | true                           | true
 t  |  (n1) < (n2*10000)      | false                          | false
 t  |  (n1) >= (n2 * -10000)  | false                          | false
 t  |  (n1) <= (n2 * -10000)  | true                           | true
 t  |  num.round(n1)          | 5439                           | 5439
 t  |  num.round(n2)          | -2                             | -2
 t  |  num.round(n1,4)        | 5439.1235                      | 5439.1235
 t  |  num.round(n1,-1)       | 5440                           | 5440
 t  |  num.trunc(n1)          | 5439                           | 5439
 t  |  num.trunc(n2)          | -1                             | -1
 t  |  num.trunc(n1,4)        | 5439.1234                      | 5439.1234
 t  |  num.trunc(n1,-1)       | 5430                           | 5430
 t  |  num.floor(n1)          | 5439                           | 5439
 t  |  num.floor(n2)          | -2                             | -2
 t  |  num.ceil(n1)           | 5440                           | 5440
 t  |  num.ceil(n2)           | -1                             | -1
 t  |  num.abs(n1)            | 5439.123456                    | 5439.123456
 t  |  num.abs(n2)            | 1.9                            | 1.9
 t  |  num.sign(n1)           | 1                              | 1
 t  |  num.sign(n2)           | -1                             | -1
 t  |  num.sqrt(n1)           | 73.750413259859093             | 73.750413259859093
 t  |  num.exp(12.3)          | 219695.98867213773             | 219695.98867213773
 t  |  num.exp(n2)            | 0.1495686192226351             | 0.1495686192226351
(45 rows)

  
--end
